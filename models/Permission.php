<?php

namespace liuxy\admin\models;

use liuxy\admin\components\DefaultIMenuImpl;
use Yii;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "permission".
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string  $name
 * @property string  $description
 * @property string  $link
 * @property integer $is_leaf
 * @property integer $editable
 * @property integer $is_nav
 * @property integer $status
 * @property integer $insert_time
 * @property string  $insert_by
 * @property string  $update_by
 * @property integer $update_time
 * @property integer $level
 * @property integer $seq
 * @property string  $icon
 */
class Permission extends DefaultIMenuImpl {

    public static $pk = 'id';
    const NAV_YES = 1;//用于导航
    const NAV_NO = 0;//不用于导航
    const LEAF_YES = 1;//叶节点
    const LEAF_NO = 0;//非叶节点
    const CACHE_SUB = 'perm.subs';
    const MAX_LEVEL = 5;

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'permission';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['parent_id', 'name', 'is_leaf', 'is_nav'], 'required'],
            [['parent_id', 'is_leaf', 'editable', 'is_nav', 'status', 'insert_time', 'update_time', 'level', 'seq'], 'integer'],
            [['name', 'insert_by', 'update_by'], 'string', 'max' => 32],
            [['description', 'link'], 'string', 'max' => 100],
            [['icon'], 'string', 'max' => 50],
            [['parent_id','name'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'parent_id' => '父级权限ID',
            'name' => '权限名称',
            'description' => '权限描述',
            'link' => '权限链接',
            'is_leaf' => '是否是叶节点',
            'editable' => '是否可编辑',
            'is_nav' => '是否用于导航，0-非导航，1-导航',
            'status' => '(1)ok,(0)disable',
            'insert_time' => '插入时间',
            'insert_by' => '添加者',
            'update_by' => '最后更新者',
            'update_time' => '最后更新时间',
            'level' => '层级',
            'seq' => '排列序号',
            'icon' => '图标样式',
        ];
    }

    /**
     * 清理子权限列表
     *
     * @param $item \liuxy\admin\models\Permission
     */
    public static function clearCache($item) {
        parent::clearCache($item);
        $roles = [];
        foreach (RolePermission::find()->where(['permission_id'=>$item->id])->all() as $rolePerm) {
            $roles[] = $rolePerm['role_id'];
        }
        foreach (AdminUserRole::find()->where(['role_id'=>$roles])->all() as $userRole) {
            AdminUser::clearPermission($userRole['user_id']);
        }
    }

    /**
     * 清理用户缓存
     * @param $permissionId
     */
    public static function clearUserPermission($permissionId) {
        $roles = [];
        foreach (RolePermission::find()->where(['permission_id'=>$permissionId])->all() as $rolePerm) {
            $roles[] = $rolePerm['role_id'];
        }
        foreach (AdminUserRole::find()->where(['role_id'=>$roles])->all() as $userRole) {
            AdminUser::clearPermission($userRole['user_id']);
        }
    }


    /**
     * @inheritDoc
     */
    public static function getSub($parentId, $filter = []) {
        // TODO: Implement getSub() method.
        $items = self::getCache()->get(static::CACHE_SUB . $parentId);
        if (!$items) {
            $items = self::findAllArray(['status' => self::STATUS_OK, 'parent_id' => $parentId], ['seq' => SORT_ASC]);
            if ($items) {
                self::getCache()->set(static::CACHE_SUB . $parentId, $items);
            } else {
                self::getCache()->set(static::CACHE_SUB . $parentId, []);
            }
        }

        if ($filter) {
            $ret = [];
            foreach($items as $item) {
                if (in_array($item['id'], $filter)) {
                    $ret[] = $item;
                }
            }
            return $ret;
        }
        return $items;
    }

    /**
     * @inheritDoc
     */
    public static function findTop($menu) {
        // TODO: Implement findTop() method.
        if ($menu->parent_id && $menu->parent_id != 1) {
            $top = self::findOne($menu->parent_id);
            if ($top) {
                $menu = self::findTop($top);
            }
        }
        return $menu;
    }

    /**
     * @inheritDoc
     */
    public static function getCheckedIdentity() {
        return 'permission_id'; // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public static function getLimit() {
        // TODO: Implement getLimit() method.
        $maxLevel = 0;
        if (isset(Yii::$app->params['perm.maxlevel'])) {
            $maxLevel = Yii::$app->params['perm.maxlevel'];
        }
        if ($maxLevel < self::MAX_LEVEL) {
            $maxLevel = self::MAX_LEVEL;
        }
        return $maxLevel;
    }
}
